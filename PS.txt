Yes, you can create a `.bat` file (batch script) to run your PowerShell script. This `.bat` file will act as a launcher for your PowerShell script, making it easier to execute or schedule tasks using Windows Task Scheduler.

Here’s how you can create a `.bat` file to execute your PowerShell script:

### **1. Create Your PowerShell Script**

First, ensure your PowerShell script (e.g., `DocumentAggregation.ps1`) is ready and saved in a location on your filesystem. For example, save it as `C:\Scripts\DocumentAggregation.ps1`.

### **2. Create a `.bat` File**

Create a batch file (`.bat`) that calls your PowerShell script. Here’s how to do it:

1. **Open Notepad**: Open Notepad or any text editor of your choice.

2. **Write the Batch Commands**:
   Paste the following code into the text editor:

   ```batch
   @echo off
   :: Set the path to PowerShell executable
   set PowerShellPath=%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe

   :: Set the path to your PowerShell script
   set ScriptPath=C:\Scripts\DocumentAggregation.ps1

   :: Execute the PowerShell script
   "%PowerShellPath%" -NoProfile -ExecutionPolicy Bypass -File "%ScriptPath%"

   :: Optional: Pause the script execution to see any output or errors
   pause
   ```

   - **`@echo off`**: Hides the command prompt commands being executed.
   - **`set PowerShellPath`**: Defines the path to the PowerShell executable.
   - **`set ScriptPath`**: Defines the path to your PowerShell script.
   - **`-NoProfile`**: Ensures that PowerShell starts without loading the user's profile, which speeds up execution.
   - **`-ExecutionPolicy Bypass`**: Temporarily bypasses the execution policy to allow the script to run. Use with caution and ensure your script is secure.
   - **`pause`**: Keeps the command prompt window open after the script execution, allowing you to see any output or error messages.

3. **Save the Batch File**:
   - Save the file with a `.bat` extension, such as `RunDocumentAggregation.bat`.
   - Choose **"All Files"** in the "Save as type" dropdown, and add the `.bat` extension to the filename.

### **3. Test the `.bat` File**

Double-click the `.bat` file to ensure it correctly executes your PowerShell script. Verify that the script runs as expected and that any output or errors are displayed in the command prompt window.

### **4. Schedule the Batch File**

You can schedule the `.bat` file to run automatically using Task Scheduler:

1. **Open Task Scheduler**:
   - Press `Windows Key + R`, type `taskschd.msc`, and press Enter.

2. **Create a New Task**:
   - Click **"Create Task"** on the right pane.

3. **General Settings**:
   - Name your task (e.g., "Run Document Aggregation").
   - Choose **"Run whether user is logged on or not"** for automatic execution.
   - Optionally, set the task to run with highest privileges.

4. **Trigger**:
   - Go to the **"Triggers"** tab and click **"New"**.
   - Set the task to trigger on a schedule (e.g., daily, weekly).

5. **Action**:
   - Go to the **"Actions"** tab and click **"New"**.
   - Set the action to **"Start a program"**.
   - For **"Program/script"**, browse to and select your `.bat` file.

6. **Conditions and Settings**:
   - Adjust conditions and settings as necessary, such as stopping the task if it runs longer than a specified duration.

7. **Finish**:
   - Click **"OK"** and enter your credentials if prompted to save the task.

### **5. Monitor and Verify**

After scheduling, monitor the Task Scheduler to ensure that the `.bat` file executes correctly at the scheduled times. Check the output and logs to confirm that the PowerShell script performs as expected.

This setup allows you to use a simple batch file to execute your PowerShell script, making it easier to manage and schedule script execution.